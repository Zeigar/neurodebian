#!/usr/bin/perl
#
# Install access to the NeuroDebian snapshot repository that allows access
# to old packages based on dates and version numbers.
#
# The UTC date/time format sent to NeuroDebian to get the repo info is in the
# format yyyymmddThhmmssz or yyymmdd. However, the script will handle and
# reformat a number of date/time formats. Quotes are required if there is a
# space between the date and time components:
#
#   yyyymmddThh:mm:ssZ
#   yyyymmdd
#   mm/dd/yyyy
#   yyyy-mm-dd
#   yyyymmddThh:mm
#   "yyyy-mm-dd hh:mm:ss"
#   "mm/dd/yy hh:mm:ss"
#
# Browse available snapshots here:
# http://snapshot-neuro.debian.net:5002/archive/neurodebian/
#
# If there is no import at the exact time you specified you will get both the
# previous and next available timestamped repos of the one you specified to make
# available versions that may have been placed in the repo before your
# selected time but after the previous snapshot.

require 5.002;
use Socket;


sub get_www_content {
    my ($url, $port) = @_;
    if (!$port) {
        $port = 80;
    }
    $url =~ /http:\/\/([^\/]+)(.*)/;
    my $dest = $1;
    my $file = $2;
    my $proto = getprotobyname('tcp');
    socket(F, PF_INET, SOCK_STREAM, $proto);
    my $sin = sockaddr_in($port,inet_aton($dest));
    connect(F, $sin) || return undef;
    my $old_fh = select(F);
    $| = 1;
    select($old_fh);
    print F "GET $file HTTP/1.0\n\n";
    $/ = undef;
    $contents = <F>;
    close(F);
    return $contents;
}


sub get_user_timestamp {
    my ($user_date) = @_;

    # Check for date command line argument
    if (!$user_date) {
        print '
Script to enable a NeurDebian archived snapshot repository. Snapshot repositories
provide previous releases of packages based on point-of-time archiving.

See:
    https://snapshot.debian.org/
    http://snapshot-neuro.debian.net:5002/

Synopsis
--------

  nd_freeze <date>

  Valid date formats include:
    yyyymmddThh:mm:ssZ
    yyyymmdd
    mm/dd/yyyy
    yyyy-mm-dd
    yyyymmddThh:mm
    "yyyy-mm-dd hh:mm:ss"
    "mm/dd/yy hh:mm:ss"

';
        exit 1;
    }

    # Prepend any single date or time values with a 0
    my @chunks = split /[\/\- TZ\:]/, $user_date;
    for my $i (0 .. $#chunks) {
        if (length $chunks[$i] == 1) {
            $chunks[$i] = "0$chunks[$i]";
        }
    }

    # Pull the date from the parameter string
    my $url_date = '';
    if (length $chunks[0] == 8) {
        $url_date = $chunks[0];
    } elsif (length $chunks[0] == 4) {
        $url_date = "$chunks[0]$chunks[1]$chunks[2]";
    } elsif (length $chunks[0] == 2) {
        $url_date = "$chunks[2]$chunks[0]$chunks[1]";
    }
    # Pull the time from the parameter string
    my $url_time = '';
    if ((scalar @chunks >= 2) && (length $chunks[-1] == 6)) {
        $url_time = "$chunks[-1]";
    } elsif ((length $chunks[0] > 4 && scalar @chunks == 3) || scalar @chunks == 5) {
        $url_time = "$chunks[-2]$chunks[-1]00";
    } elsif ((length $chunks[0] > 4 && scalar @chunks == 4) || scalar @chunks == 6) {
        $url_time = "$chunks[-3]$chunks[-2]$chunks[-1]";
    }

    if (!$url_date) {
        print '
ERROR: Invalid date

Valid date formats include:
  yyyymmddThh:mm:ssZ
  yyyymmdd
  mm/dd/yyyy
  yyyy-mm-dd
  yyyymmddThh:mm
  "yyyy-mm-dd hh:mm:ss"
  "mm/dd/yy hh:mm:ss"
';
        exit 1;
    }

    $user_timestamp='';
    if ($url_time) {
        $user_timestamp = "${url_date}T${url_time}Z";
    } else {
        $user_timestamp = "${url_date}T000000Z";
    }

    return $user_timestamp;
}


sub get_sources {
    my %sources;
    my @lines = split /\n/, qx/apt-cache policy/;
    for my $i (0 .. $#lines) {
        if ($lines[$i] =~ /(http\S+\/)([\w\-]+)\/\s+(\S+)/) {
            my $url = $1;
            my $repo = $2;
            $3 =~ /([\w-\/]+)\/([\w\-]+)/;
            my $archive = $1;
            my $type = $2;
            $lines[$i+1] =~ /o=(\w+),/;
            my $domain = $1;
            $repo = 'neurodebian' if ($domain eq 'NeuroDebian');
            if ($domain ne "Ubuntu") {
                my $key = "$domain|$repo|$archive";
                if (exists $sources{$key}) {
                    $sources{$key}{type} .= " $type";
                } else {
                    %{$sources{$key}} = (
                        domain => $domain,
                        url => $url,
                        repo => $repo,
                        archive => $archive,
                        type => $type,
                    );
                }
            }
        }
    }
    return %sources;
}


sub get_next_timestamp {
    my ($user_timestamp, $source_ref) = @_;
    my %source = %$source_ref;

    if ($source{domain} eq 'Debian') {
        $url = "http://snapshot.debian.org/archive/${source{repo}}/${user_timestamp}/";
        $contents = get_www_content($url, 80);
    } else {
        $url = "http://snapshot-neuro.debian.net/archive/${source{repo}}/${user_timestamp}/";
        $contents = get_www_content($url, 5002);
        if ($contents =~ /The resource has been moved to http:\/\/[0-9\.]+:5002\/archive\/${source{repo}}\/(\d{8}T\d{6}Z\/)/) {
            $contents = get_www_content("http://snapshot-neuro.debian.net/archive/${source{repo}}/${1}", 5002);
        }
    }

    $contents =~ /\/archive\/${source{repo}}\/([0-9TZ]+)\/">next</;

    return $1;
}


sub write_snapshot_sources {
    my ($snapshots_sources_file, $user_timestamp, %sources) = @_;

    open my $fp, '>', $snapshots_sources_file;

    for my $key (keys %sources) {
        my $next_timestamp = get_next_timestamp($user_timestamp, $sources{$key});
        if ($sources{$key}{domain} eq 'Debian') {
            print $fp "deb http://snapshot.debian.org/archive/${sources{$key}{repo}}/$user_timestamp/ ${sources{$key}{archive}} ${sources{$key}{type}}\n";
            if ($next_timestamp) {
                print $fp "deb http://snapshot.debian.org/archive/${sources{$key}{repo}}/$next_timestamp/ ${sources{$key}{archive}} ${sources{$key}{type}}\n";
            }
        } else {
            print $fp "deb http://snapshot-neuro.debian.net:5002/archive/${sources{$key}{repo}}/$user_timestamp/ ${sources{$key}{archive}} ${sources{$key}{type}}\n";
            print $fp "deb http://snapshot-neuro.debian.net:5002/archive/${sources{$key}{repo}}/$next_timestamp/ ${sources{$key}{archive}} ${sources{$key}{type}}\n";
        }
    }

    close $fp;
}


sub disable_lines {
    my ($sources_file, %sources) = @_;

    qx/cp $sources_file ${sources_file}.original/ if (!-e "${sources_file}.original");

    open my $in, '<', "${sources_file}.original"
        or die "Could not open file '${sources_file}.original' $!";
    open my $out, '>', $sources_file
        or die "Could not open file '$sources_file' $!";
    my @lines = split /\n/, <$in>;
    foreach (@lines) {
        if (/^#/) {
            print $out "$_\n";
            next;
        }
        my $found = 0;
        for my $key (keys %sources) {
            $_ =~ /http:\/\/[^\/]+\/(.*)$/;
            my $file_line = join ' ', sort split /\s+/, $1;
            $sources{$key}{repo} = 'debian' if $sources{$key}{repo} eq 'neurodebian';
            my $source_line = join ' ', sort split /\s+/, "$sources{$key}{repo} $sources{$key}{archive} $sources{$key}{type}";
            if ($file_line eq $source_line) {
                $found = 1;
                last;
            }
        }
        if ($found) {
            print $out "# $_\n";
        } else {
            print $out "$_\n";
        }
    }
    close $in;
    close $out;
}


##### Program main

my $user_timestamp = get_user_timestamp($ARGV[0]);
my $snapshots_sources_file = '/etc/apt/sources.list.d/snapshots.sources.list';
my @sources_files = ('/etc/apt/sources.list', '/etc/apt/sources.list.d/neurodebian.sources.list');

# Restore original sources files and apt-cache if this is a rerun of the command.
qx/rm $snapshots_sources_file/ if (-e $snapshots_sources_file);
foreach my $sources_file (@sources_files) {
    qx/cp ${sources_file}.original $sources_file/ if (-e "${sources_file}.original");
}
qx/apt-get update/;

my %sources = get_sources();

# Knock on snapshot's door. This is temporarily necessary until the production
# version of the site is made available.
get_www_content('http://neuro.debian.net/_files/knock-snapshots');

write_snapshot_sources($snapshots_sources_file, $user_timestamp, %sources);
foreach my $sources_file (@sources_files) {
    disable_lines($sources_file, %sources) if (-e $sources_file);
}
qx/apt-get update/;

exit 0
